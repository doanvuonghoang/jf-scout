/**
 * 
 */
package com.jf.scout.shared.installer.ui.desktop.forms;

import java.util.Map;

import javax.annotation.Generated;

import org.eclipse.scout.rt.shared.data.form.AbstractFormData;
import org.eclipse.scout.rt.shared.data.form.ValidationRule;
import org.eclipse.scout.rt.shared.data.form.fields.AbstractValueFieldData;
import org.eclipse.scout.rt.shared.data.form.properties.AbstractPropertyData;

/**
 * <b>NOTE:</b><br>
 * This class is auto generated by the Scout SDK. No manual modifications recommended.
 * 
 * @generated
 */
@Generated(value = "org.eclipse.scout.sdk.workspace.dto.formdata.FormDataDtoUpdateOperation", comments = "This class is auto generated by the Scout SDK. No manual modifications recommended.")
public class DatabaseSetupFormData extends AbstractFormData {

  private static final long serialVersionUID = 1L;

  public DatabaseSetupFormData() {
  }

  public ConnectionStatus getConnectionStatus() {
    return getFieldByClass(ConnectionStatus.class);
  }

  public DatabaseDriver getDatabaseDriver() {
    return getFieldByClass(DatabaseDriver.class);
  }

  public DatabasePassword getDatabasePassword() {
    return getFieldByClass(DatabasePassword.class);
  }

  /**
   * access method for property DatabaseSetupNr.
   */
  public Long getDatabaseSetupNr() {
    return getDatabaseSetupNrProperty().getValue();
  }

  /**
   * access method for property DatabaseSetupNr.
   */
  public void setDatabaseSetupNr(Long databaseSetupNr) {
    getDatabaseSetupNrProperty().setValue(databaseSetupNr);
  }

  public DatabaseSetupNrProperty getDatabaseSetupNrProperty() {
    return getPropertyByClass(DatabaseSetupNrProperty.class);
  }

  public DatabaseUri getDatabaseUri() {
    return getFieldByClass(DatabaseUri.class);
  }

  public DatabaseUser getDatabaseUser() {
    return getFieldByClass(DatabaseUser.class);
  }

  public static class ConnectionStatus extends AbstractValueFieldData<String> {

    private static final long serialVersionUID = 1L;

    public ConnectionStatus() {
    }
  }

  public static class DatabaseDriver extends AbstractValueFieldData<String> {

    private static final long serialVersionUID = 1L;

    public DatabaseDriver() {
    }

    /**
     * list of derived validation rules.
     */
    @Override
    protected void initValidationRules(Map<String, Object> ruleMap) {
      super.initValidationRules(ruleMap);
      ruleMap.put(ValidationRule.MANDATORY, true);
      ruleMap.put(ValidationRule.MAX_LENGTH, 4000);
    }
  }

  public static class DatabasePassword extends AbstractValueFieldData<String> {

    private static final long serialVersionUID = 1L;

    public DatabasePassword() {
    }

    /**
     * list of derived validation rules.
     */
    @Override
    protected void initValidationRules(Map<String, Object> ruleMap) {
      super.initValidationRules(ruleMap);
      ruleMap.put(ValidationRule.MAX_LENGTH, 4000);
    }
  }

  public static class DatabaseSetupNrProperty extends AbstractPropertyData<Long> {

    private static final long serialVersionUID = 1L;

    public DatabaseSetupNrProperty() {
    }
  }

  public static class DatabaseUri extends AbstractValueFieldData<String> {

    private static final long serialVersionUID = 1L;

    public DatabaseUri() {
    }

    /**
     * list of derived validation rules.
     */
    @Override
    protected void initValidationRules(Map<String, Object> ruleMap) {
      super.initValidationRules(ruleMap);
      ruleMap.put(ValidationRule.MANDATORY, true);
      ruleMap.put(ValidationRule.MAX_LENGTH, 4000);
    }
  }

  public static class DatabaseUser extends AbstractValueFieldData<String> {

    private static final long serialVersionUID = 1L;

    public DatabaseUser() {
    }

    /**
     * list of derived validation rules.
     */
    @Override
    protected void initValidationRules(Map<String, Object> ruleMap) {
      super.initValidationRules(ruleMap);
      ruleMap.put(ValidationRule.MAX_LENGTH, 4000);
    }
  }
}
